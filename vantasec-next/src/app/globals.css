@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary: #00f0ff;
  --secondary: #7928ca;

  /* Default Next.js theme variables - can be adjusted or removed if not used */
  --background-rgb: 10, 10, 10; /* Corresponds to #0a0a0a */
  --foreground-rgb: 241, 241, 241; /* Corresponds to #f1f1f1 */

  /* For Next.js specific theming if needed, otherwise VantaSec's direct styles will apply */
  --geist-sans-font: 'Space Grotesk', sans-serif; /* Overriding default Geist font */
}

/*
  The @theme inline block from the original globals.css is specific to some Next.js theming conventions.
  We are primarily using direct styles and Tailwind, so it might not be strictly necessary
  or could be adapted if deeper Next.js theme integration is desired later.
  For now, focusing on migrating existing styles.
*/

body {
    font-family: 'Space Grotesk', sans-serif;
    background-color: rgb(var(--background-rgb)); /* #0a0a0a */
    color: rgb(var(--foreground-rgb)); /* #f1f1f1 */
    overflow-x: hidden;
    scroll-behavior: smooth; /* This is also in original html tag, ensure it applies */
}

html {
    scroll-behavior: smooth; /* from original CSS */
}

.gradient-text {
    background: linear-gradient(90deg, var(--primary), var(--secondary));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
}

.glow {
    text-shadow: 0 0 10px rgba(0, 240, 255, 0.7);
}
.glow-green {
    text-shadow: 0 0 10px rgba(15, 193, 39, 0.801);
}
.cyber-border {
    position: relative;
    border: 1px solid rgba(0, 240, 255, 0.3); /* theme('colors.brand-primary') with opacity */
}

.cyber-border::before {
    content: '';
    position: absolute;
    top: -5px;
    left: -5px;
    right: -5px;
    bottom: -5px;
    border: 1px solid rgba(121, 40, 202, 0.3); /* theme('colors.brand-secondary') with opacity */
    z-index: -1;
}

.pulse {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(0, 240, 255, 0.4); } /* theme('colors.brand-primary') with opacity */
    70% { box-shadow: 0 0 0 10px rgba(0, 240, 255, 0); }
    100% { box-shadow: 0 0 0 0 rgba(0, 240, 255, 0); }
}

.hacker-grid {
    background-image:
        linear-gradient(rgba(0, 240, 255, 0.05) 1px, transparent 1px), /* theme('colors.brand-primary') with opacity */
        linear-gradient(90deg, rgba(0, 240, 255, 0.05) 1px, transparent 1px); /* theme('colors.brand-primary') with opacity */
    background-size: 30px 30px;
}

.scanline {
    position: relative;
    overflow: hidden;
}

.scanline::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(to bottom, transparent, var(--primary), transparent);
    animation: scan 8s linear infinite;
}

@keyframes scan {
    0% { top: -2px; opacity: 0; }
    10% { opacity: 1; }
    90% { opacity: 1; }
    100% { top: 100%; opacity: 0; }
}

/* Renamed from .terminal-cursor to avoid conflict if JS targets it differently */
.custom-terminal-cursor::after {
    content: '|';
    animation: blink 1s step-end infinite;
}

@keyframes blink {
    from, to { opacity: 1; }
    50% { opacity: 0; }
}

.hexagon {
    clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
}

.floating {
    animation: floating 6s ease-in-out infinite;
}

@keyframes floating {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
    100% { transform: translateY(0px); }
}

/* Renamed from .typewriter to avoid conflict with JS targeting if any */
.custom-typewriter-style {
    overflow: hidden;
    border-right: 3px solid var(--primary); /* Ensure var(--primary) is defined or use theme('colors.brand-primary') */
    white-space: nowrap;
    /* Animations 'typing' and 'blink-caret' will be controlled by JS or different CSS if needed */
}

/* Keyframes for typewriter are kept, but might be dynamically applied via JS */
@keyframes typing {
    from { width: 0 }
    to { width: 100% }
}

@keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: var(--primary) } /* Ensure var(--primary) is defined */
}

/* Animation for section transitions */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate-fadeIn {
    animation: fadeInUp 0.8s ease-out forwards;
}

/* Button hover effects */
.btn-hover-grow {
    transition: all 0.3s ease;
}

.btn-hover-grow:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 240, 255, 0.2); /* theme('colors.brand-primary') with opacity */
}

/* Ensure the .hacker-grid is applied to the body or a main wrapper in layout.tsx */
/* For example, if layout.tsx's body needs it: */
/* body.hacker-grid-bg { @apply hacker-grid; } */
/* Or apply directly in layout.tsx's body className */

/* The animated background elements with .floating were in index.html directly.
   These will need to be recreated as a React component or within layout.tsx
   if they are to be preserved. They are not just CSS.
   <div class="fixed inset-0 overflow-hidden pointer-events-none">
        <div class="absolute top-1/4 left-1/4 w-4 h-4 rounded-full bg-purple-500 opacity-20 floating" style="animation-delay: 0s;"></div>
        ...
   </div>
*/
